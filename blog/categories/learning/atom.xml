<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: learning | holon]]></title>
  <link href="http://abelsan.github.com/blog/categories/learning/atom.xml" rel="self"/>
  <link href="http://abelsan.github.com/"/>
  <updated>2014-08-22T12:02:09-04:00</updated>
  <id>http://abelsan.github.com/</id>
  <author>
    <name><![CDATA[abel sanchez]]></name>
    <email><![CDATA[abel@mit.edu]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Manifest Thought]]></title>
    <link href="http://abelsan.github.com/blog/2013/09/01/manifest-thought/"/>
    <updated>2013-09-01T14:02:00-04:00</updated>
    <id>http://abelsan.github.com/blog/2013/09/01/manifest-thought</id>
    <content type="html"><![CDATA[<p>One of the most prodigious powers in science fiction is the power to "manifest thought". With computer programming, "The magic of myth and legend has come true in our time".</p>

<p><blockquote><p>Yet, the program construct, unlike the poetâ€™s words, is real in the sense that it moves and works, producing visible outputs separately from the contruct itself. It prints results, draws pictures, produces sounds, moves arms. The magic of myth and legend has come true in our time. One types the correct incantation at the keyboard, and a display screen comes to life showing things that never were nor could be.</p></p><p><p>Programming then is fun because it gratifies creative longings built deep within us and delights sensibilities we have in common with all men.</p><footer><strong>Fred Brooks</strong> <cite>The Mythical Man Month</cite></footer></blockquote>
<img src="http://mit.edu/doval/www/assets/img/blog/taken.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Particular Becomes the Portal on the Transcendent]]></title>
    <link href="http://abelsan.github.com/blog/2013/08/31/the-particular-becomes-the-portal-on-the-transcendent/"/>
    <updated>2013-08-31T12:00:00-04:00</updated>
    <id>http://abelsan.github.com/blog/2013/08/31/the-particular-becomes-the-portal-on-the-transcendent</id>
    <content type="html"><![CDATA[<p>In a completely different context to programming, I happened onto an interview that made a great point on abstraction versus the problem. When it comes to teaching programming, I completely agree.</p>

<p>BILL MOYERS: You know, Campbell told me that that was the great appeal to him of Carl Jung. That Jung wrapped his psychology into the stories of what had actually happened in his life and, and in the lives of the people sitting in front of him. And if he could get somebody into a story, he knew that person would discover who he was more likely than if he dealt with just abstract ideas.</p>

<p>MARSHALL GANZ: Boy, it is so true. It's the particular. See, we often think, we associate understanding with abstraction. It's just the opposite.</p>

<p>BILL MOYERS: That's right.</p>

<p>MARSHALL GANZ: The particular then becomes the portal on the transcendent, because it's through the particular experience that I'm able then to communicate the emotional content of the value that is moving me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lightning bug and lightning]]></title>
    <link href="http://abelsan.github.com/blog/2013/08/05/lightning-bug-and-lightning/"/>
    <updated>2013-08-05T11:50:00-04:00</updated>
    <id>http://abelsan.github.com/blog/2013/08/05/lightning-bug-and-lightning</id>
    <content type="html"><![CDATA[<p>Mark Twain famously said, "The difference between the almost right word &amp; the right word is really a large matter--it's the difference between the lightning bug and the lightning."</p>

<p>When it comes to naming variables, objects, functions, classes, and namespaces, the same applies.</p>

<p>Clarity and expressiveness come with experience. However, the beginner can still learn a lot by looking at conventions, best practices, reading code from peers, and thinking hard about a word that best express the programmer's intent.</p>

<p><img src="http://mit.edu/doval/www/assets/img/blog/lightning.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Learning Human]]></title>
    <link href="http://abelsan.github.com/blog/2013/05/26/make-learning-human/"/>
    <updated>2013-05-26T18:56:00-04:00</updated>
    <id>http://abelsan.github.com/blog/2013/05/26/make-learning-human</id>
    <content type="html"><![CDATA[<p>As a teacher, your first and most important goal is to capture the attention of the listener. If you fail, nothing else will matter.</p>

<p>The techniques vary from speaker to speaker but invariable they comprise volume, timing, suspense, and tone. For example, a colleague once told me, "lowering your voice is like using bold on text".</p>

<p>When it comes to writing, a similar process takes place. I have been reading, "Unless It Moves the Human Heart: The Craft and Art of Writing". Much like in teaching, if we fail to make the human connection, we loose our audience.</p>

<p>Khan was on campus recently. In one of his answers, I heard the same argument:
<blockquote><p>I cannot understate the fact that I was making it for my cousin. The fact that I was their tutor, that I had a human connection when I was making the videos. If I were making these for Bill Gates, I would have messed up. I would have fallen into the trap of high production. I would have needed a team of script writers, a team of computer graphics engineers, and voice over actors. The output of that process looks great but but does not feel very human.</p><footer><strong>Khan</strong> <cite>Key to Success</cite></footer></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Teaching of Formal Programming]]></title>
    <link href="http://abelsan.github.com/blog/2013/05/16/the-teaching-of-formal-programming/"/>
    <updated>2013-05-16T10:36:00-04:00</updated>
    <id>http://abelsan.github.com/blog/2013/05/16/the-teaching-of-formal-programming</id>
    <content type="html"><![CDATA[<p>I read the following last night. It strikes me we could substitute writing for programming and it would hold.</p>

<p><blockquote><p>For decades researchers have been telling us that "the teaching of formal grammar has a negligible or . . . even a harmful effect on the teaching of writing" (Richard Braddock, Richard Lloyd-Jones, Lowell Schoer, Research in Written Composition, 1963). I agree if by "the teaching of formal grammar" is meant memorizing the parts of speech or rehearsing the distinction between dependent and independent clauses or listing the uses of the subjunctive. That kind of rote knowledge is merely taxonomic. It explains nothing; students who acquire it have learned nothing about how to write, and it is no surprise when research demonstrate its nonutility.</p><footer><strong>Stanley Fish</strong> <cite>How to Write a Sentence</cite></footer></blockquote></p>
]]></content>
  </entry>
  
</feed>
